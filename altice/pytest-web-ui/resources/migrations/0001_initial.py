# Generated by Django 4.0.5 on 2024-03-12 09:18

from django.db import migrations, models
import django.db.models.deletion
import jsonfield.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AccessPoint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model', models.CharField(help_text='Enter DUT Model name: [Example: Netgear AP]', max_length=20, verbose_name='DUT Model')),
                ('mode', models.CharField(help_text='Enter Wi-Fi Standards [Example : wifi6,wifi5,wifi4]', max_length=20, verbose_name='Wi-Fi Standards')),
                ('serial', models.CharField(help_text='Enter DUT Serial Number [Example: 1234567890]', max_length=50, verbose_name='DUT Serial number')),
                ('jumphost', models.CharField(default='true', help_text='Always true', max_length=20, verbose_name='Jumphost')),
                ('ip', models.GenericIPAddressField(help_text='Enter Lanforge IP Address [Example: 192.168.200.10]', protocol='IPv4', unique=True, verbose_name='Lanforge IP')),
                ('username', models.CharField(help_text='Enter Lanforge Username [Example: lanforge]', max_length=20, verbose_name='Lanforge Username')),
                ('password', models.CharField(help_text='Enter Lanforge Password [Example: lanforge]', max_length=20, verbose_name='Lanforge Password')),
                ('port', models.CharField(help_text='Enter Lanforge SSH Port number [Example: 22]', max_length=20, verbose_name='Lanforge SSH port number')),
                ('jumphost_tty', models.CharField(help_text='Enter the serial connection tty [Example: /dev/ttyUSB0]', max_length=20, verbose_name='Serial Connection tty')),
                ('version', models.CharField(blank=True, default='', help_text='Enter DUT Firmware version [Example : next-latest] ', max_length=20, verbose_name='Firmware Version')),
                ('ap_username', models.CharField(default='admin', help_text='Enter AP Username', max_length=20, verbose_name='AP Username')),
                ('ap_password', models.CharField(default='DustBunnyRoundup9#', help_text='Enter Access Point Password [Example: AP Password] ', max_length=20, verbose_name='AP Password')),
                ('ap_prompt', models.CharField(default='root@GEN8', help_text='Enter the tty location [Example: root@GEN8]', max_length=20, verbose_name='AP Prompt')),
                ('image', models.ImageField(blank=True, help_text='Choose the image of the AP[Example : .img .png, .jpg, .jpeg file]', null=True, upload_to='images', verbose_name='DUT Image')),
                ('attached', models.BooleanField(default=False, help_text='Attached: Enable(The AP is attached to a Testbed')),
                ('use_ssh', models.BooleanField(default=True, help_text='Attached: Enable By default')),
            ],
            options={
                'verbose_name_plural': '       Accesspoint',
            },
        ),
        migrations.CreateModel(
            name='Feature',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feature_label', models.CharField(max_length=50, null=True, unique=True)),
                ('feature_name', models.CharField(max_length=50, null=True, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='FirmwareImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('firmware_name', models.CharField(help_text='Enter the Firmware version of the DUT [Example : V1.0.0.100]', max_length=50, null=True, unique=True, verbose_name='Firmware Version')),
            ],
            options={
                'verbose_name_plural': '    Firmware Image',
            },
        ),
        migrations.CreateModel(
            name='ReleaseCycle',
            fields=[
                ('release_cycle_name', models.CharField(max_length=50, null=True, unique=True)),
                ('start_date', models.DateTimeField(max_length=50, null=True, unique=True)),
                ('end_date', models.DateTimeField(max_length=50, null=True, unique=True)),
                ('relid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
            ],
            options={
                'verbose_name_plural': '   Release Cycle',
            },
        ),
        migrations.CreateModel(
            name='Tester',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('password', models.CharField(max_length=20)),
                ('name', models.CharField(max_length=20)),
                ('status', models.BooleanField(default=True)),
                ('chart', models.JSONField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': '        Tester',
            },
        ),
        migrations.CreateModel(
            name='Testplan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('testplan_name', models.CharField(max_length=50, null=True, unique=True)),
                ('testplan_marker', models.CharField(blank=True, max_length=500, null=True, unique=True)),
                ('tester_id', models.CharField(blank=True, default='admin', max_length=50, null=True)),
                ('features', models.CharField(blank=True, max_length=500, null=True)),
                ('band', models.CharField(blank=True, max_length=50, null=True)),
                ('security', models.CharField(blank=True, max_length=50, null=True)),
                ('channels', models.CharField(blank=True, max_length=50, null=True)),
                ('bandwidth', models.CharField(blank=True, max_length=50, null=True)),
                ('protocol', models.CharField(blank=True, max_length=50, null=True)),
                ('sub_feature', models.CharField(blank=True, max_length=50, null=True)),
                ('time', models.CharField(blank=True, max_length=50, null=True)),
                ('unique_features', models.CharField(blank=True, max_length=500, null=True)),
                ('unique_band', models.CharField(blank=True, max_length=500, null=True)),
                ('unique_security', models.CharField(blank=True, max_length=500, null=True)),
                ('unique_channels', models.CharField(blank=True, max_length=500, null=True)),
                ('unique_bandwidth', models.CharField(blank=True, max_length=500, null=True)),
                ('unique_protocol', models.CharField(blank=True, max_length=500, null=True)),
                ('testcases', models.CharField(blank=True, max_length=500, null=True)),
                ('description', models.CharField(blank=True, max_length=500, null=True)),
                ('data', jsonfield.fields.JSONField(blank=True, null=True)),
                ('Total_Testcases', models.CharField(blank=True, max_length=50, null=True)),
                ('Estimated_Time', models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                'verbose_name_plural': ' Testplan',
            },
        ),
        migrations.CreateModel(
            name='TrafficGenerator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter Traffic Generator Name [ Example â€“ LANforge]', max_length=100, verbose_name='Traffic Generator Name')),
                ('ip', models.GenericIPAddressField(help_text='Enter Traffic Generator IP Address [Example : 192.168.200.100]', protocol='IPv4', unique=True, verbose_name='Traffic Generator IP')),
                ('port', models.CharField(help_text='Enter HTTP Port Number [Example : 8080]', max_length=100, verbose_name='HTTP Port')),
                ('ssh_port', models.CharField(help_text='Enter SSH Port Number [Example : 22]', max_length=100, verbose_name='SSH Port')),
                ('twog_radio', models.CharField(help_text='Enter 2.4GHz Radio interface name [Example : 1.1.wiphy0,1.1.wiphy1] (Seperate Multiple Radios With Comma)', max_length=100, verbose_name='2.4GHz Radio')),
                ('fiveg_radio', models.CharField(help_text='Enter 5GHz Radio interface name [Example : 1.1.wiphy0,1.1.wiphy1] (Seperate Multiple Radios With Comma)', max_length=100, verbose_name='5GHz Radio')),
                ('ax_radio', models.CharField(blank=True, default='', help_text='Enter Ax Radio interface name [Example : 1.1.wiphy0,1.1.wiphy2] (Seperate multiple radios with comma)', max_length=100, verbose_name='Ax Radio')),
                ('upstream', models.CharField(help_text='Enter the port which is used to run traffic [Example : 1.1.eth1]', max_length=100, verbose_name='WAN Upstream Port')),
                ('lan_upstream', models.CharField(blank=True, default='', help_text='Enter the port which is used to run traffic [Example : 1.1.eth1]', max_length=100, verbose_name='LAN Upstream Port')),
                ('upstream_subnet', models.CharField(default='', editable=False, help_text='Enter Upstream Subnet address [Example : 192.168.200.100.1/24]', max_length=100)),
                ('uplink', models.CharField(default='', editable=False, help_text='Enter uplink port [Example : eth1]', max_length=100)),
                ('twog_station_name', models.CharField(help_text='Enter 2.4Ghz station name [Example : sta0]', max_length=100, verbose_name='2.4GHz Station Name')),
                ('fiveg_station_name', models.CharField(help_text='Enter 5Ghz station name [Example : sta1]', max_length=100, verbose_name='5GHz Station Name')),
                ('ax_station_name', models.CharField(blank=True, default='', help_text='Enter Ax station name [Example : ax]', max_length=100)),
                ('attenuation_connected_serial', models.CharField(blank=True, default='', help_text='Enter Connected Attenuator [Example : 3258,3456] (Seperate Multiple Attenuation Values With Comma)', max_length=100, verbose_name='Connected Serial Atenuator')),
                ('attenuation_selected_serial', models.CharField(blank=True, default='', help_text='Enter Selected Attenuator [Example : 3258,3456] (Seperate Multiple Attenuation Values With Comma)', max_length=100, verbose_name='Selected Serial Attenuator')),
                ('attached', models.BooleanField(default=False, help_text='Attached: Enable(The Traffic Generator is attached to a Testbed')),
                ('image', models.ImageField(blank=True, null=True, upload_to='images')),
            ],
            options={
                'verbose_name_plural': '      Traffic Generators',
            },
        ),
        migrations.CreateModel(
            name='TestScheduler',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tester_name', models.CharField(max_length=100, null=True)),
                ('name', models.CharField(default='abcd', max_length=50)),
                ('task', models.CharField(default='resources.tasks.collect_marker_task', max_length=50)),
                ('testplan', models.CharField(max_length=500, null=True)),
                ('accesspoint', models.CharField(max_length=500, null=True)),
                ('accesspoint_mode', models.CharField(max_length=500, null=True)),
                ('accesspoint_serial', models.CharField(max_length=500, null=True)),
                ('trafficgenerator', models.CharField(max_length=500, null=True)),
                ('testbed', models.CharField(max_length=500, null=True)),
                ('starttime', models.CharField(max_length=50, null=True, unique=True)),
                ('estimated_time', models.CharField(blank=True, max_length=50, null=True)),
                ('completed', models.BooleanField(default=False)),
                ('status', models.CharField(default='Pending', max_length=100)),
                ('firmware_name', models.CharField(max_length=50, null=True)),
                ('created_at', models.CharField(default='RC-3', max_length=200)),
                ('celery_task_id', models.CharField(default=0, max_length=200)),
                ('total_passed', models.IntegerField(default=0)),
                ('total_failed', models.IntegerField(default=0)),
                ('total_error', models.IntegerField(default=0)),
                ('total_duration', models.IntegerField(default=0)),
                ('total_testcases', models.CharField(default=0, max_length=200)),
                ('remarks', models.CharField(default='No Remarks', max_length=200)),
                ('evaluator', models.CharField(default='None', max_length=200)),
                ('tester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='resources.tester')),
            ],
        ),
        migrations.CreateModel(
            name='Testbed',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('testbedname', models.CharField(help_text=' ', max_length=50, unique=True)),
                ('status', models.BooleanField(default=True, help_text='Reservation Status: Enable(Unreserved Testbed)')),
                ('availability', models.BooleanField(default=True, help_text='To disable the testbed the testbed status to be enabled by default.')),
                ('accesspoint', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='resources.accesspoint')),
                ('trafficgenerator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='resources.trafficgenerator')),
            ],
            options={
                'verbose_name_plural': '     Testbed',
            },
        ),
    ]
