{"name": "test_client_nat_open_chn36_20Mhz_US_5g_tcp_download[setup_profiles0]", "status": "broken", "statusDetails": {"message": "AttributeError: 'NoneType' object has no attribute 'split'", "trace": "self = <tests.e2e.basic.performance_tests.wifi_capacity_test.wifi_capacity_channel_country_uni.country_code_US_cli.channel_wi...n.fiveg_band.test_throughput_US_20Mhz_tcp_single_client_download_5g_open.TestCountryUS20Mhz5G object at 0x7fdc50b6a700>\ninstantiate_profile = <class 'controller.controller_4x.controller.AController'>, get_lf_logs = None, lf_test = <lanforge.lf_tests.RunTest object at 0x7fdc4fe2e5b0>\nupdate_report = <testrails.reporting.Reporting object at 0x7fdc4fe2e760>, station_names_fiveg = ['sta100'], lf_tools = <lf_tools.ChamberView object at 0x7fdc4fe140a0>, test_cases = [], testbed = 'testbed-new'\nal_1 = True\nget_configuration = {'access_point': [{'ap_password': 'DustBunnyRoundup9#', 'ap_prompt': 'root@GEN8', 'ap_username': 'admin', 'attached': ...1'], '2.4G-Station-Name': 'sta0', '5G-Radio': ['1.1.wiphy1'], '5G-Station-Name': 'sta1', ...}, 'name': 'lanforge_216'}}\nget_attenuators = ('', '')\n\n    @allure.testcase(url=\"https://telecominfraproject.atlassian.net/browse/WIFI-2546\", name=\"WIFI-6938\")\n    @pytest.mark.open\n    @pytest.mark.twentyMhz\n    @pytest.mark.fiveg\n    @pytest.mark.channel_36\n    @pytest.mark.tcp_download\n    @pytest.mark.wifi_capacity_test\n    @pytest.mark.tcp\n    def test_client_nat_open_chn36_20Mhz_US_5g_tcp_download(self, instantiate_profile, get_lf_logs,\n                                                 lf_test, update_report,\n                                                 station_names_fiveg, lf_tools,\n                                                 test_cases, testbed, al_1, get_configuration, get_attenuators):\n        \"\"\"\n           pytest -m \"country_code and twentyMhz and open and fiveg and channel_36\"\n        \"\"\"\n        profile_data = setup_params_general[\"ssid_modes\"][\"open\"][0]\n        ssid_name = profile_data[\"ssid_name\"]\n        security_key = profile_data[\"security_key\"]\n        security = \"open\"\n        mode = \"NAT\"\n        band = \"fiveg\"\n        vlan = 1\n        channel = setup_params_general['rf-5G-1']['5G']['channel']\n        channel_width = setup_params_general['rf-5G-1']['5G']['channel-width']\n        expected_throughput = setup_params_general[\"expected-throughput\"]\n        batch_size = 1\n        lf_test.Client_disconnect(clear_all_sta=True, clean_l3_traffic=True)\n        lf_tools.reset_scenario()\n        connected_attenuators, selected_attenuators = get_attenuators\n        print(f\"connected_attenuators : {connected_attenuators}\")\n        print(f\"selected_attenuators : {selected_attenuators}\")\n    \n        attenuation_value = 0\n        connected_attenuators = list(set(connected_attenuators) - set(selected_attenuators))\n    \n        if selected_attenuators:  # selected attenuators list is Empty\n            for selected_atten in range(len(selected_attenuators)):\n                print(f\"This is available in selected : selected_attens : {selected_atten}\")\n                for i in range(4):\n                    lf_test.attenuator_modify(int(selected_attenuators[selected_atten]), i, attenuation_value)\n                    time.sleep(0.5)\n    \n        for connected_atten in range(len(connected_attenuators)):\n            print(f\"This is available in connected : connected_atten : {connected_atten}\")\n            for i in range(4):\n                lf_test.attenuator_modify(int(connected_attenuators[connected_atten]), i, 0)\n                time.sleep(0.5)\n    \n        # for connected_atten in range(len(connected_attenuators)):\n        #     for selected_atten in range(len(selected_attenuators)):\n        #         if connected_atten in selected_attenuators:\n        #             print(f\"This is available in selected : connected_atten : {connected_atten}\")\n        #             for i in range(4):\n        #                 lf_test.attenuator_modify(int(connected_attenuators[connected_atten]), i, attenuation_value)\n        #                 time.sleep(0.5)\n        #         else:\n        #             print(f\"This is not available in selected : connected_atten : {connected_atten}\")\n        #             for i in range(4):\n        #                 lf_test.attenuator_modify(int(connected_attenuators[connected_atten]), i, 0)\n        #                 time.sleep(0.5)\n    \n        # Start//To set attenuation\n        # attenuator_serial = lf_test.attenuator_serial()\n        # print(f\"attenuator_serial : {attenuator_serial}\")\n        # connected_attenuators = get_configuration['traffic_generator']['details']['attenuation_connected_serial']\n        # attenuator_serial1 = (attenuator_serial[0].split(\".\"))[-1]\n        # print(f\"attenuator_serial1 : {attenuator_serial1}\")\n    \n        # End//Attenuation is set\n    \n        # Start//To Do: This code looks important for ip not getting issue might need to test later\n        # for i in range(3):\n        #     sta.append(station_name + str(i))\n        # print(sta)\n        # lf_tools.set_radio_antenna(\"cli-json/set_wifi_radio\", shelf, resource, values[2], 1)\n        # sta_ip = lf_test.Client_Connect_Using_Radio(ssid=ssid_name, passkey=profile_data[\"security_key\"],\n        #                                             radio=radio_name, station_name=sta)\n        # if not sta_ip:\n        #     print(\"test failed due to no station ip\")\n        #     assert False\n        # END//To Do: This code looks important for ip not getting issue might need to test later\n    \n        lf_tools.reset_scenario()\n    \n        obj = instantiate_profile(get_configuration['access_point'][0], \"../libs/apnos/\", \"2.x\")\n>       obj.check_and_set_ap_channel(radio=\"5G\", band=channel_width, channel=channel)\n\ne2e/basic/performance_tests/wifi_capacity_test/wifi_capacity_channel_country_uni/country_code_US_cli/channel_width_20Mhz/tcp_download_1G_single_client/open/fiveg_band/test_throughput_US_20Mhz_tcp_single_client_download_5g_open.py:164: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <controller.controller_4x.controller.AController object at 0x7fdc8428d520>, radio = '5G', band = 20, channel = 36\n\n    def check_and_set_ap_channel(self, radio=\"2G\", band=\"20\", channel=\"AUTO\"):\n        # print(\"PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP\",self.get_channel_band(radio=radio))\n        print(\"Desired Channel type\",type(channel))\n        print(\"Desired Channel\", channel)\n        # p=type(self.get_channel_band(radio=radio))\n        channel_from_ap = self.get_channel_band(radio=radio)\n>       channel_from_ap.split(\"wifi-channel:\")\nE       AttributeError: 'NoneType' object has no attribute 'split'\n\n../libs/controller/controller_4x/controller.py:656: AttributeError"}, "description": "\n           pytest -m \"country_code and twentyMhz and open and fiveg and channel_36\"\n        ", "parameters": [{"name": "setup_profiles", "value": "{'mode': 'NAT', 'ssid_modes': {'open': [{'ssid_name': 'client_connectivity_al', 'appliedRadios': ['5G'], 'security_key': 'something'}]}, 'rf-5G-1': {'5G': {'band': '5G', 'country': 'US', 'channel-mode': 'VHT', 'channel-width': 20, 'channel': 36}}, 'rf-5G-2': {'5G': {'band': '5G', 'country': 'US', 'channel-mode': 'VHT', 'channel-width': 20, 'channel': 40}}, 'rf-5G-3': {'5G': {'band': '5G', 'country': 'US', 'channel-mode': 'VHT', 'channel-width': 20, 'channel': 44}}, 'rf-5G-4': {'5G': {'band': '5G', 'country': 'US', 'channel-mode': 'VHT', 'channel-width': 20, 'channel': 48}}, 'rf-5G-5': {'5G': {'band': '5G', 'country': 'US', 'channel-mode': 'VHT', 'channel-width': 20, 'channel': 149}}, 'radius': False, 'expected-throughput': 186.42}"}], "start": 1697025024213, "stop": 1697025048442, "uuid": "bfd5647c-446e-4474-934a-cd844f148ef1", "historyId": "2a29d08b4537a4bce171d246f02bbd6b", "testCaseId": "65bfe56cb54e8abf7f979253e59f8b0b", "fullName": "e2e.basic.performance_tests.wifi_capacity_test.wifi_capacity_channel_country_uni.country_code_US_cli.channel_width_20Mhz.tcp_download_1G_single_client.open.fiveg_band.test_throughput_US_20Mhz_tcp_single_client_download_5g_open.TestCountryUS20Mhz5G#test_client_nat_open_chn36_20Mhz_US_5g_tcp_download", "labels": [{"name": "feature", "value": "NAT MODE CLIENT CONNECTIVITY"}, {"name": "tag", "value": "tcp"}, {"name": "tag", "value": "wifi_capacity_test"}, {"name": "tag", "value": "tcp_download"}, {"name": "tag", "value": "channel_36"}, {"name": "tag", "value": "fiveg"}, {"name": "tag", "value": "twentyMhz"}, {"name": "tag", "value": "open"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup_profiles')"}, {"name": "tag", "value": "country_code"}, {"name": "tag", "value": "nat"}, {"name": "tag", "value": "united_states"}, {"name": "tag", "value": "bandwidth_20mhz"}, {"name": "tag", "value": "al"}, {"name": "tag", "value": "download"}, {"name": "tag", "value": "wifi_capacity_single_client"}, {"name": "tag", "value": "wifi_capacity_open_20mhz_all_channels_single_client_download_1gbps"}, {"name": "tag", "value": "throughput_open_20mhz_all_channels_single_client_download_1gbps"}, {"name": "parentSuite", "value": "e2e.basic.performance_tests.wifi_capacity_test.wifi_capacity_channel_country_uni.country_code_US_cli.channel_width_20Mhz.tcp_download_1G_single_client.open.fiveg_band"}, {"name": "suite", "value": "test_throughput_US_20Mhz_tcp_single_client_download_5g_open"}, {"name": "subSuite", "value": "TestCountryUS20Mhz5G"}, {"name": "host", "value": "imgd"}, {"name": "thread", "value": "93465-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "e2e.basic.performance_tests.wifi_capacity_test.wifi_capacity_channel_country_uni.country_code_US_cli.channel_width_20Mhz.tcp_download_1G_single_client.open.fiveg_band.test_throughput_US_20Mhz_tcp_single_client_download_5g_open"}], "links": [{"type": "test_case", "url": "https://telecominfraproject.atlassian.net/browse/WIFI-2546", "name": "WIFI-6938"}]}