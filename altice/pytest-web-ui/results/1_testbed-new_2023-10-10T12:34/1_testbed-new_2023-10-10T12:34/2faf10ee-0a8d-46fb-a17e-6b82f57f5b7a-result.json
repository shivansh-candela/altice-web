{"name": "test_client_nat_wpa2_chn1_20Mhz_US_2g_upload[setup_profiles0]", "status": "broken", "statusDetails": {"message": "TypeError: 'bool' object is not subscriptable", "trace": "self = <tests.e2e.basic.performance_tests.wifi_capacity_test.wifi_capacity_channel_country_uni.country_code_US_cli.channel_wi..._band.test_throughput_US_20Mhz_tcp_single_client_upload_2g_wpa2_personal.TestCountryUS20Mhz2g object at 0x7fc1530d37c0>\ninstantiate_profile = <class 'controller.controller_4x.controller.AController'>, get_lf_logs = None, lf_test = <lanforge.lf_tests.RunTest object at 0x7fc152439790>\nupdate_report = <testrails.reporting.Reporting object at 0x7fc152439940>, station_names_twog = ['sta000'], lf_tools = <lf_tools.ChamberView object at 0x7fc152456a90>, test_cases = [], testbed = 'testbed-new', al_1 = True\nget_configuration = {'access_point': [{'ap_password': 'DustBunnyRoundup9#', 'ap_prompt': 'root@GEN8', 'ap_username': 'admin', 'attached': ...1'], '2.4G-Station-Name': 'sta0', '5G-Radio': ['1.1.wiphy1'], '5G-Station-Name': 'sta1', ...}, 'name': 'lanforge_216'}}\nget_attenuators = ('', '')\n\n    @allure.testcase(url=\"https://telecominfraproject.atlassian.net/browse/WIFI-2546\", name=\"WIFI-6938\")\n    @pytest.mark.wpa2_personal\n    @pytest.mark.twentyMhz\n    @pytest.mark.twog\n    @pytest.mark.channel_1\n    @pytest.mark.tcp_upload\n    def test_client_nat_wpa2_chn1_20Mhz_US_2g_upload(self, instantiate_profile, get_lf_logs,\n                                              lf_test, update_report,\n                                              station_names_twog, lf_tools,\n                                              test_cases, testbed, al_1, get_configuration, get_attenuators):\n        \"\"\"\n           pytest -m \"country_code and twentyMhz and wpa2 and twog and channel_1\"\n        \"\"\"\n        profile_data = setup_params_general[\"ssid_modes\"][\"wpa2_personal\"][0]\n        ssid_name = profile_data[\"ssid_name\"]\n        security_key = profile_data[\"security_key\"]\n        security = \"wpa2\"\n        mode = \"NAT\"\n        band = \"twog\"\n        vlan = 1\n        channel = setup_params_general['rf-2G-1']['2G']['channel']\n        channel_width = setup_params_general['rf-2G-1']['2G']['channel-width']\n        expected_throughput = setup_params_general[\"expected-throughput\"]\n        batch_size = 1\n        lf_test.Client_disconnect(clear_all_sta=True, clean_l3_traffic=True)\n    \n        lf_tools.reset_scenario()\n        connected_attenuators, selected_attenuators = get_attenuators\n        print(f\"connected_attenuators : {connected_attenuators}\")\n        print(f\"selected_attenuators : {selected_attenuators}\")\n    \n        attenuation_value = 0\n        connected_attenuators = list(set(connected_attenuators) - set(selected_attenuators))\n    \n        if selected_attenuators:  # selected attenuators list is Empty\n            for selected_atten in range(len(selected_attenuators)):\n                print(f\"This is available in selected : selected_attens : {selected_atten}\")\n                for i in range(4):\n                    lf_test.attenuator_modify(int(selected_attenuators[selected_atten]), i, attenuation_value)\n                    time.sleep(0.5)\n    \n        for connected_atten in range(len(connected_attenuators)):\n            print(f\"This is available in connected : connected_atten : {connected_atten}\")\n            for i in range(4):\n                lf_test.attenuator_modify(int(connected_attenuators[connected_atten]), i, 0)\n                time.sleep(0.5)\n    \n        # for connected_atten in range(len(connected_attenuators)):\n        #     for selected_atten in range(len(selected_attenuators)):\n        #         if connected_atten in selected_attenuators:\n        #             print(f\"This is available in selected : connected_atten : {connected_atten}\")\n        #             for i in range(4):\n        #                 lf_test.attenuator_modify(int(connected_attenuators[connected_atten]), i, attenuation_value)\n        #                 time.sleep(0.5)\n        #         else:\n        #             print(f\"This is not available in selected : connected_atten : {connected_atten}\")\n        #             for i in range(4):\n        #                 lf_test.attenuator_modify(int(connected_attenuators[connected_atten]), i, 0)\n        #                 time.sleep(0.5)\n    \n        # Start//To set attenuation\n        # attenuator_serial = lf_test.attenuator_serial()\n        # print(f\"attenuator_serial : {attenuator_serial}\")\n        # connected_attenuators = get_configuration['traffic_generator']['details']['attenuation_connected_serial']\n        # attenuator_serial1 = (attenuator_serial[0].split(\".\"))[-1]\n        # print(f\"attenuator_serial1 : {attenuator_serial1}\")\n    \n        # End//Attenuation is set\n    \n        # Start//To Do: This code looks important for ip not getting issue might need to test later\n        # for i in range(3):\n        #     sta.append(station_name + str(i))\n        # print(sta)\n        # lf_tools.set_radio_antenna(\"cli-json/set_wifi_radio\", shelf, resource, values[2], 1)\n        # sta_ip = lf_test.Client_Connect_Using_Radio(ssid=ssid_name, passkey=profile_data[\"security_key\"],\n        #                                             radio=radio_name, station_name=sta)\n        # if not sta_ip:\n        #     print(\"test failed due to no station ip\")\n        #     assert False\n        # END//To Do: This code looks important for ip not getting issue might need to test later\n    \n        lf_tools.reset_scenario()\n    \n        obj = instantiate_profile(get_configuration['access_point'][0], \"../libs/apnos/\", \"2.x\")\n        obj.check_and_set_ap_channel(radio=\"2G\", band=channel_width, channel=channel)\n    \n        lf_tools.add_stations(band=\"2G\", num_stations=1, dut=lf_tools.dut_name, ssid_name=ssid_name)\n        # lf_tools.add_stations(band=\"ax\", num_stations=1, dut=lf_tools.dut_name, ssid_name=ssid_name)\n        lf_tools.Chamber_View()\n    \n        wct_obj = lf_test.wifi_capacity(instance_name=\"test_client_wpa2_NAT_tcp_ul_2g\", mode=mode, vlan_id=vlan,\n                                        upload_rate=\"1Gbps\", batch_size=\"1\",\n                                        download_rate=\"0\", protocol=\"TCP-IPv4\", duration=\"60000\")\n    \n        report_name = wct_obj.report_name[0]['LAST'][\"response\"].split(\":::\")[1].split(\"/\")[-1]\n    \n        lf_tools.attach_report_graphs(report_name=report_name)\n        lf_tools.attach_report_kpi(report_name=report_name)\n    \n        csv_val = lf_tools.read_csv_individual_station_throughput(dir_name=report_name, option=None,\n                                                                  individual_station_throughput=False, kpi_csv=True,\n                                                                  file_name=\"/kpi.csv\", batch_size=str(batch_size))\n        print(csv_val)\n>       print(f\"Upload Traffic Throughput: {csv_val['Up']['UL 1000000000bps pdu AUTO - 1 STA']}\")\nE       TypeError: 'bool' object is not subscriptable\n\ne2e/basic/performance_tests/wifi_capacity_test/wifi_capacity_channel_country_uni/country_code_US_cli/channel_width_20Mhz/tcp_upload_1G_single_client/wpa2_personal/twog_band/test_throughput_US_20Mhz_tcp_single_client_upload_2g_wpa2_personal.py:162: TypeError"}, "description": "\n           pytest -m \"country_code and twentyMhz and wpa2 and twog and channel_1\"\n        ", "attachments": [{"name": "WIFI Capacity Test PDF Report", "source": "c81d3530-c5a8-400e-a9f8-07bef2e484a8-attachment.attach"}, {"name": "chart-0.png", "source": "1001e463-87c2-4fbf-a021-10188560d69c-attachment.attach", "type": "image/png"}, {"name": "chart-2.png", "source": "d556f3c7-469a-4ea3-a0d4-6a33fe84884e-attachment.attach", "type": "image/png"}, {"name": "chart-3.png", "source": "fc0cf9d7-b793-4151-9db5-74d7d6c83a8d-attachment.attach", "type": "image/png"}, {"name": "chart-4.png", "source": "70676b9a-376f-4e3b-9867-7594a12a09e1-attachment.attach", "type": "image/png"}, {"name": "chart-5.png", "source": "a0d76e67-1c10-4948-a012-60198f3607a8-attachment.attach", "type": "image/png"}, {"name": "chart-6.png", "source": "e39a3d91-5bd9-491f-9b8b-88d443578f26-attachment.attach", "type": "image/png"}, {"name": "kpi-chart-1.png", "source": "937fe819-e6ca-4345-807a-e82860dd1540-attachment.attach", "type": "image/png"}, {"name": "log", "source": "4cb47c92-c18c-4c08-9fa7-e06f0505a44c-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "setup_profiles", "value": "{'mode': 'NAT', 'ssid_modes': {'wpa2_personal': [{'ssid_name': 'client_connectivity_al', 'appliedRadios': ['2G'], 'security_key': 'something', 'security': 'wpa2'}]}, 'rf-2G-1': {'2G': {'band': '2G', 'country': 'US', 'channel-mode': 'VHT', 'channel-width': 20, 'channel': 1}}, 'rf-2G-6': {'2G': {'band': '2G', 'country': 'US', 'channel-mode': 'VHT', 'channel-width': 20, 'channel': 6}}, 'rf-2G-11': {'2G': {'band': '2G', 'country': 'US', 'channel-mode': 'VHT', 'channel-width': 20, 'channel': 11}}, 'radius': False, 'expected-throughput': 186.42}"}], "start": 1696931712501, "stop": 1696931913231, "uuid": "95a155cd-6222-4593-89a6-368d9799ee35", "historyId": "b6683da8e7d3c6105c425dfa631b9728", "testCaseId": "82fc1c47d8c81844f06d79576da5eb76", "fullName": "e2e.basic.performance_tests.wifi_capacity_test.wifi_capacity_channel_country_uni.country_code_US_cli.channel_width_20Mhz.tcp_upload_1G_single_client.wpa2_personal.twog_band.test_throughput_US_20Mhz_tcp_single_client_upload_2g_wpa2_personal.TestCountryUS20Mhz2g#test_client_nat_wpa2_chn1_20Mhz_US_2g_upload", "labels": [{"name": "feature", "value": "NAT MODE CLIENT CONNECTIVITY"}, {"name": "tag", "value": "tcp_upload"}, {"name": "tag", "value": "channel_1"}, {"name": "tag", "value": "twog"}, {"name": "tag", "value": "twentyMhz"}, {"name": "tag", "value": "wpa2_personal"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup_profiles')"}, {"name": "tag", "value": "country_code"}, {"name": "tag", "value": "nat"}, {"name": "tag", "value": "wpa2"}, {"name": "tag", "value": "united_states"}, {"name": "tag", "value": "bandwidth_20mhz"}, {"name": "tag", "value": "al"}, {"name": "tag", "value": "tcp"}, {"name": "tag", "value": "wifi_capacity"}, {"name": "tag", "value": "wifi_capacity_test"}, {"name": "tag", "value": "upload"}, {"name": "tag", "value": "wifi_capacity_single_client"}, {"name": "tag", "value": "wifi_capacity_wpa2_20mhz_all_channels_single_client_upload_1gbps"}, {"name": "tag", "value": "throughput_wpa2_20mhz_all_channels_single_client_upload_1gbps"}, {"name": "parentSuite", "value": "e2e.basic.performance_tests.wifi_capacity_test.wifi_capacity_channel_country_uni.country_code_US_cli.channel_width_20Mhz.tcp_upload_1G_single_client.wpa2_personal.twog_band"}, {"name": "suite", "value": "test_throughput_US_20Mhz_tcp_single_client_upload_2g_wpa2_personal"}, {"name": "subSuite", "value": "TestCountryUS20Mhz2g"}, {"name": "host", "value": "imgd"}, {"name": "thread", "value": "65725-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "e2e.basic.performance_tests.wifi_capacity_test.wifi_capacity_channel_country_uni.country_code_US_cli.channel_width_20Mhz.tcp_upload_1G_single_client.wpa2_personal.twog_band.test_throughput_US_20Mhz_tcp_single_client_upload_2g_wpa2_personal"}], "links": [{"type": "test_case", "url": "https://telecominfraproject.atlassian.net/browse/WIFI-2546", "name": "WIFI-6938"}]}